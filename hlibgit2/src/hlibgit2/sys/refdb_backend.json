{
  "records": [
    {
      "name": {
        "name": "git_reference_iterator",
        "dbgOrigin": " typedef type libgit2/include/git2/types.h:192:40 typedef type libgit2/include/git2/types.h:192:40 > typedef!=nullptr > struct"
      },
      "fields": [
        {
          "name": "db",
          "type": {
            "name": "git_refdb",
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:103:26"
          }
        },
        {
          "name": "next",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reference",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:189:30"
              },
              {
                "name": "git_reference_iterator",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:192:40"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Return the current reference and advance the iterator.\n\t */"
        },
        {
          "name": "next_name",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "git_reference_iterator",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:192:40"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Return the name of the current reference and advance the iterator\n\t */"
        },
        {
          "name": "free",
          "type": {
            "parameters": [
              {
                "name": "void",
                "isBuiltin": true
              },
              {
                "name": "git_reference_iterator",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:192:40"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Free the iterator\n\t */"
        }
      ],
      "recordDefName": {
        "name": "git_reference_iterator",
        "tag": "TypeTagStruct"
      }
    },
    {
      "name": {
        "name": "git_refdb_backend",
        "dbgOrigin": " typedef type libgit2/include/git2/types.h:106:34 typedef type libgit2/include/git2/types.h:106:34 > typedef!=nullptr > struct"
      },
      "fields": [
        {
          "name": "version",
          "type": {
            "name": "unsigned int",
            "dbgOrigin": " >builtin/unqual",
            "isBuiltin": true
          },
          "doc": "/**< The backend API version */"
        },
        {
          "name": "exists",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "int",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Queries the refdb backend for the existence of a reference.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg exists The implementation shall set this to `0` if a ref does\n\t *             not exist, otherwise to `1`.\n\t * @arg ref_name The reference's name that should be checked for\n\t *               existence.\n\t * @return `0` on success, a negative error value code.\n\t */"
        },
        {
          "name": "lookup",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reference",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:189:30"
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Queries the refdb backend for a given reference.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg out The implementation shall set this to the allocated\n\t *          reference, if it could be found, otherwise to `NULL`.\n\t * @arg ref_name The reference's name that should be checked for\n\t *               existence.\n\t * @return `0` on success, `GIT_ENOTFOUND` if the reference does\n\t *         exist, otherwise a negative error code.\n\t */"
        },
        {
          "name": "iterator",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reference_iterator",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:192:40"
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr >elaboratedrecord type filler include/git2/sys/refdb_backend.h:111:6"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Allocate an iterator object for the backend.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg out The implementation shall set this to the allocated\n\t *          reference iterator. A custom structure may be used with an\n\t *          embedded `git_reference_iterator` structure. Both `next`\n\t *          and `next_name` functions of `git_reference_iterator` need\n\t *          to be populated.\n\t * @arg glob A pattern to filter references by. If given, the iterator\n\t *           shall only return references that match the glob when\n\t *           passed to `wildmatch`.\n\t * @return `0` on success, otherwise a negative error code.\n\t */"
        },
        {
          "name": "write",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "git_reference",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:189:30"
              },
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_signature",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:186:3"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "git_oid",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/oid.h:108:3"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Writes the given reference to the refdb.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg ref The reference to persist. May either be a symbolic or\n\t *          direct reference.\n\t * @arg force Whether to write the reference if a reference with the\n\t *            same name already exists.\n\t * @arg who The person updating the reference. Shall be used to create\n\t *          a reflog entry.\n\t * @arg message The message detailing what kind of reference update is\n\t *              performed. Shall be used to create a reflog entry.\n\t * @arg old If not `NULL` and `force` is not set, then the\n\t *          implementation needs to ensure that the reference is currently at\n\t *          the given OID before writing the new value. If both `old`\n\t *          and `old_target` are `NULL`, then the reference should not\n\t *          exist at the point of writing.\n\t * @arg old_target If not `NULL` and `force` is not set, then the\n\t *                 implementation needs to ensure that the symbolic\n\t *                 reference is currently at the given target before\n\t *                 writing the new value. If both `old` and\n\t *                 `old_target` are `NULL`, then the reference should\n\t *                 not exist at the point of writing.\n\t * @return `0` on success, otherwise a negative error code.\n\t */"
        },
        {
          "name": "rename",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reference",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:189:30"
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_signature",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:186:3"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Rename a reference in the refdb.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg out The implementation shall set this to the newly created\n\t *          reference or `NULL` on error.\n\t * @arg old_name The current name of the reference that is to be renamed.\n\t * @arg new_name The new name that the old reference shall be renamed to.\n\t * @arg force Whether to write the reference if a reference with the\n\t *            target name already exists.\n\t * @arg who The person updating the reference. Shall be used to create\n\t *          a reflog entry.\n\t * @arg message The message detailing what kind of reference update is\n\t *              performed. Shall be used to create a reflog entry.\n\t * @return `0` on success, otherwise a negative error code.\n\t */"
        },
        {
          "name": "del",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "git_oid",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/oid.h:108:3"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Deletes the given reference from the refdb.\n\t *\n\t * If it exists, its reflog should be deleted as well.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg ref_name The name of the reference name that shall be deleted.\n\t * @arg old_id If not `NULL` and `force` is not set, then the\n\t *             implementation needs to ensure that the reference is currently at\n\t *             the given OID before writing the new value.\n\t * @arg old_target If not `NULL` and `force` is not set, then the\n\t *                 implementation needs to ensure that the symbolic\n\t *                 reference is currently at the given target before\n\t *                 writing the new value.\n\t * @return `0` on success, otherwise a negative error code.\n\t */"
        },
        {
          "name": "compress",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Suggests that the given refdb compress or optimize its references.\n\t *\n\t * This mechanism is implementation specific. For on-disk reference\n\t * databases, this may pack all loose references.\n\t *\n\t * A refdb implementation may provide this function; if it is not\n\t * provided, nothing will be done.\n\t *\n\t * @return `0` on success a negative error code otherwise\n\t */"
        },
        {
          "name": "has_log",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Query whether a particular reference has a log (may be empty)\n\t *\n\t * Shall return 1 if it has a reflog, 0 it it doesn't and negative in\n\t * case an error occurred.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @return `0` on success, `1` if the reflog for the given reference\n\t *         exists, a negative error code otherwise\n\t */"
        },
        {
          "name": "ensure_log",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Make sure a particular reference will have a reflog which\n\t * will be appended to on writes.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "free",
          "type": {
            "parameters": [
              {
                "name": "void",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Frees any resources held by the refdb (including the `git_refdb_backend`\n\t * itself).\n\t *\n\t * A refdb backend implementation must provide this function.\n\t */"
        },
        {
          "name": "reflog_read",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reflog",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:166:27"
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Read the reflog for the given reference name.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "reflog_write",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "git_reflog",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:166:27"
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Write a reflog to disk.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg reflog The complete reference log for a given reference. Note\n\t *             that this may contain entries that have already been\n\t *             written to disk.\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "reflog_rename",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Rename a reflog.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg old_name The name of old reference whose reflog shall be renamed from.\n\t * @arg new_name The name of new reference whose reflog shall be renamed to.\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "reflog_delete",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Remove a reflog.\n\t *\n\t * A refdb implementation must provide this function.\n\t *\n\t * @arg name The name of the reference whose reflog shall be deleted.\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "lock",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "void",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Lock a reference.\n\t *\n\t * A refdb implementation may provide this function; if it is not\n\t * provided, the transaction API will fail to work.\n\t *\n\t * @arg payload_out Opaque parameter that will be passed verbosely to\n\t *                  `unlock`.\n\t * @arg refname Reference that shall be locked.\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        },
        {
          "name": "unlock",
          "type": {
            "parameters": [
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_refdb_backend",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
              },
              {
                "name": "void",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr",
                "isBuiltin": true
              },
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "int",
                "dbgOrigin": " >builtin/unqual",
                "isBuiltin": true
              },
              {
                "name": "git_reference",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:189:30"
              },
              {
                "name": "git_signature",
                "qualifiers": [
                  {
                    "isPointer": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:186:3"
              },
              {
                "name": "char",
                "qualifiers": [
                  {
                    "isPointer": true
                  },
                  {
                    "isConst": true
                  }
                ],
                "dbgOrigin": " T-pointer >ref/ptr T-const >char",
                "isBuiltin": true
              }
            ],
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "kind": "FunctionPtr",
            "dbgOrigin": " T-pointer >ref/ptr >func"
          },
          "doc": "/**\n\t * Unlock a reference.\n\t *\n\t * Only one of target or symbolic_target will be set.\n\t * `success` will be true if the reference should be update, false if\n\t * the lock must be discarded.\n\t *\n\t * A refdb implementation must provide this function if a `lock`\n\t * implementation is provided.\n\t *\n\t * @arg payload The payload returned by `lock`.\n\t * @arg success `1` if a reference should be updated, `2` if\n\t *              a reference should be deleted, `0` if the lock must be\n\t *              discarded.\n\t * @arg update_reflog `1` in case the reflog should be updated, `0`\n\t *                    otherwise.\n\t * @arg ref The reference which should be unlocked.\n\t * @arg who The person updating the reference. Shall be used to create\n\t *          a reflog entry in case `update_reflog` is set.\n\t * @arg message The message detailing what kind of reference update is\n\t *              performed. Shall be used to create a reflog entry in\n\t *              case `update_reflog` is set.\n\t * @return `0` on success, a negative error code otherwise\n\t */"
        }
      ],
      "recordDefName": {
        "name": "git_refdb_backend",
        "tag": "TypeTagStruct"
      }
    }
  ],
  "functions": [
    {
      "name": "git_refdb_init_backend",
      "resultTy": {
        "name": "int",
        "dbgOrigin": " >builtin/unqual",
        "isBuiltin": true
      },
      "arguments": [
        {
          "type": {
            "name": "git_refdb_backend",
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
          },
          "name": "backend"
        },
        {
          "type": {
            "name": "unsigned int",
            "dbgOrigin": " >builtin/unqual",
            "isBuiltin": true
          },
          "name": "version"
        }
      ]
    },
    {
      "name": "git_refdb_backend_fs",
      "resultTy": {
        "name": "int",
        "dbgOrigin": " >builtin/unqual",
        "isBuiltin": true
      },
      "arguments": [
        {
          "type": {
            "name": "git_refdb_backend",
            "qualifiers": [
              {
                "isPointer": true
              },
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
          },
          "name": "backend_out"
        },
        {
          "type": {
            "name": "git_repository",
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:118:31"
          },
          "name": "repo"
        }
      ]
    },
    {
      "name": "git_refdb_set_backend",
      "resultTy": {
        "name": "int",
        "dbgOrigin": " >builtin/unqual",
        "isBuiltin": true
      },
      "arguments": [
        {
          "type": {
            "name": "git_refdb",
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:103:26"
          },
          "name": "refdb"
        },
        {
          "type": {
            "name": "git_refdb_backend",
            "qualifiers": [
              {
                "isPointer": true
              }
            ],
            "dbgOrigin": " T-pointer >ref/ptr typedef type libgit2/include/git2/types.h:106:34"
          },
          "name": "backend"
        }
      ]
    }
  ]
}